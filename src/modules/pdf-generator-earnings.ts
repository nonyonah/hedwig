import PDFDocument from 'pdfkit';

export interface EarningsData {
  walletAddress: string;
  timeframe: string;
  totalEarnings: number;
  totalFiatValue?: number;
  totalPayments: number;
  earnings: Array<{
    token: string;
    network: string;
    total: number;
    count: number;
    averageAmount: number;
    lastPayment?: string;
    fiatValue?: number;
    fiatCurrency?: string;
    exchangeRate?: number;
    percentage?: number;
    category?: string;
    source?: string;
  }>;
  period: {
    startDate: string;
    endDate: string;
  };
  insights?: {
    largestPayment?: {
      amount: number;
      token: string;
      network: string;
      date: string;
      fiatValue?: number;
    };
    topToken?: {
      token: string;
      totalAmount: number;
      percentage: number;
    };
    motivationalMessage?: string;
  };
}

export async function generateEarningsPDF(data: EarningsData): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const buffers: Buffer[] = [];
      
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(buffers);
        resolve(pdfBuffer);
      });

      // Header with gradient effect (simulated with colors)
      doc.rect(0, 0, doc.page.width, 100)
         .fillColor('#4F46E5')
         .fill();
      
      doc.fillColor('white')
         .fontSize(24)
         .font('Helvetica-Bold')
         .text('üí∞ Earnings Summary Report', 50, 30);
      
      doc.fontSize(12)
         .text(`üìÖ Period: ${data.period.startDate} to ${data.period.endDate}`, 50, 60)
         .text(`üè¶ Wallet: ${data.walletAddress.slice(0, 10)}...`, 300, 60);

      // Main content
      let yPosition = 130;
      
      // Total earnings section with emoji highlights
      doc.fillColor('#1F2937')
         .fontSize(18)
         .font('Helvetica-Bold')
         .text('üìä Financial Overview', 50, yPosition);
      
      yPosition += 30;
      doc.fontSize(14)
         .font('Helvetica')
         .text(`üíé Total Earnings: ${data.totalEarnings} tokens`, 70, yPosition)
         .text(`üìà Total Payments: ${data.totalPayments}`, 70, yPosition + 20);
      
      yPosition += 60;
      
      // Earnings breakdown
      doc.fontSize(14)
         .fillColor('#1F2937')
         .text('üíé Earnings Breakdown', 50, yPosition);
      yPosition += 30;

      data.earnings.slice(0, 5).forEach((earning, index) => {
        doc.fontSize(11)
           .fillColor('#374151')
           .text(`${index + 1}. ${earning.token} (${earning.network})`, 70, yPosition)
           .text(`Total: ${earning.total.toFixed(6)}`, 300, yPosition);
        
        if (earning.fiatValue) {
          doc.text(`~$${earning.fiatValue.toFixed(2)}`, 450, yPosition);
        }
        
        yPosition += 20;
      });
      
      yPosition += 20;
      
      // Insights section
      if (data.insights) {
        doc.fontSize(16)
           .font('Helvetica-Bold')
           .text('üéØ Key Insights', 50, yPosition);
        
        yPosition += 25;
        
        if (data.insights.largestPayment) {
          doc.fontSize(12)
             .font('Helvetica')
             .text(`üèÜ Largest Payment: ${JSON.stringify(data.insights.largestPayment)}`, 70, yPosition);
          yPosition += 20;
        }
        
        if (data.insights.topToken) {
          doc.fontSize(12)
             .fillColor('#4F46E5')
             .text(`üèÜ Top Token: ${data.insights.topToken.token} (${data.insights.topToken.percentage.toFixed(1)}%)`, 70, yPosition);
          yPosition += 25;
        }
        
        if (data.insights.motivationalMessage) {
          doc.fontSize(14)
             .fillColor('#059669')
             .font('Helvetica-Bold')
             .text(`üí™ ${data.insights.motivationalMessage}`, 70, yPosition);
          yPosition += 30;
        }
      }
      
      // Footer with motivational content
      doc.fontSize(10)
         .fillColor('#6B7280')
         .font('Helvetica')
         .text('üöÄ Keep building your financial future! Generated by Hedwig AI', 50, doc.page.height - 50);
      
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}