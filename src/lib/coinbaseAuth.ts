import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';

// In-memory cache for the bearer token
let tokenCache = {
  token: '',
  expiresAt: 0,
};

/**
 * Generates or retrieves a cached Coinbase Cloud API Bearer Token.
 * The token is generated by creating a signed JWT and exchanging it with the Coinbase auth service.
 * Required environment variables: CDP_API_KEY_NAME, CDP_PRIVATE_KEY
 * @returns {Promise<string>} The bearer token.
 */
export async function getCoinbaseBearerToken(): Promise<string> {
  const now = Math.floor(Date.now() / 1000);

  // If we have a valid, non-expired token in cache, return it
  if (tokenCache.token && tokenCache.expiresAt > now + 60) { // 60s buffer
    return tokenCache.token;
  }

  const apiKeyName = process.env.CDP_API_KEY_NAME;
  const privateKey = process.env.CDP_PRIVATE_KEY;

  if (!apiKeyName || !privateKey) {
    throw new Error('CDP_API_KEY_NAME and CDP_PRIVATE_KEY must be set in environment variables.');
  }

  // The private key from environment variables might have escaped newlines
  const formattedPrivateKey = privateKey.replace(/\\n/g, '\n');

  const token = jwt.sign(
    {
      sub: apiKeyName,
      iss: 'coinbase-cloud',
      nbf: now,
      exp: now + 60, // Token is valid for 60 seconds
      aud: ['cdp'],
    },
    formattedPrivateKey,
    {
      algorithm: 'ES256',
      header: {
        kid: apiKeyName,
        alg: 'ES256',
        typ: 'JWT',
        nonce: uuidv4(),
      } as any, // Cast to any to allow custom 'nonce' header
    }
  );

  const response = await fetch('https://api.cdp.coinbase.com/v2/auth/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ jwt: token }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Failed to fetch bearer token from Coinbase: ${errorText}`);
  }

  const { token: bearerToken, expiry } = await response.json();

  // Cache the new token and its expiration time
  tokenCache = {
    token: bearerToken,
    expiresAt: expiry,
  };

  return bearerToken;
}
