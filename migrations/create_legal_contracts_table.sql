-- Create legal_contracts table for storing AI-generated legal contract documents
CREATE TABLE IF NOT EXISTS legal_contracts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Project Details
    project_title TEXT NOT NULL,
    project_description TEXT,
    
    -- Client InformationA
    client_name TEXT NOT NULL,
    client_email TEXT,
    client_wallet TEXT NOT NULL,
    
    -- Freelancer Information
    freelancer_name TEXT NOT NULL,
    freelancer_email TEXT,
    freelancer_wallet TEXT NOT NULL,
    
    -- Financial Details
    payment_amount DECIMAL(20, 6) NOT NULL,
    token_type TEXT NOT NULL,
    chain TEXT NOT NULL,
    
    -- Timeline
    deadline TIMESTAMPTZ NOT NULL,
    
    -- Milestones (stored as JSONB)
    milestones JSONB,
    
    -- Contract Details
    refund_policy TEXT,
    contract_text TEXT NOT NULL,
    contract_hash TEXT NOT NULL UNIQUE,
    
    -- Status and Metadata
    status TEXT NOT NULL DEFAULT 'generated' CHECK (status IN (
        'generated',    -- Contract generated by AI
        'approved',     -- Approved by client
        'deployed',     -- Smart contract deployed
        'active',       -- Contract is active
        'completed',    -- Contract completed
        'cancelled'     -- Contract cancelled
    )),
    
    -- Timeline
    created_at TIMESTAMPTZ DEFAULT NOW(),
    approved_at TIMESTAMPTZ,
    deployed_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_legal_contracts_client_email ON legal_contracts(client_email);
CREATE INDEX IF NOT EXISTS idx_legal_contracts_freelancer_email ON legal_contracts(freelancer_email);
CREATE INDEX IF NOT EXISTS idx_legal_contracts_status ON legal_contracts(status);
CREATE INDEX IF NOT EXISTS idx_legal_contracts_chain ON legal_contracts(chain);
CREATE INDEX IF NOT EXISTS idx_legal_contracts_created_at ON legal_contracts(created_at);
CREATE INDEX IF NOT EXISTS idx_legal_contracts_contract_hash ON legal_contracts(contract_hash);

-- Create trigger for updated_at timestamp
CREATE OR REPLACE FUNCTION update_legal_contracts_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_legal_contracts_updated_at
    BEFORE UPDATE ON legal_contracts
    FOR EACH ROW
    EXECUTE FUNCTION update_legal_contracts_updated_at();

-- Add RLS (Row Level Security) policies
ALTER TABLE legal_contracts ENABLE ROW LEVEL SECURITY;

-- RLS Policies for legal_contracts
CREATE POLICY "Users can view contracts they are involved in" ON legal_contracts
    FOR SELECT USING (
        client_email = auth.jwt() ->> 'email' OR 
        freelancer_email = auth.jwt() ->> 'email'
    );

CREATE POLICY "Service can manage all contracts" ON legal_contracts
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND (email LIKE '%@hedwig.build' OR email LIKE '%@admin.hedwig%')
        )
    );

-- Add comments for documentation
COMMENT ON TABLE legal_contracts IS 'AI-generated legal contract documents';
COMMENT ON COLUMN legal_contracts.contract_hash IS 'SHA-256 hash of the contract text for integrity verification';
COMMENT ON COLUMN legal_contracts.milestones IS 'Project milestones stored as JSON array';
COMMENT ON COLUMN legal_contracts.status IS 'Current status of the legal contract';